import type { GestureResponderEvent, PressableProps, ViewStyle } from 'react-native';
type UseAnimatedOffsetProps = {
    offset: {
        width: number;
        height: number;
    };
    reflectedLightOffset: {
        width: number;
        height: number;
    };
    blurRadius: number;
    damping: number;
    duration: number;
    onPressIn?: PressableProps['onPressIn'];
    onPressOut?: PressableProps['onPressOut'];
};
export declare function useAnimatedOffset(props: UseAnimatedOffsetProps): {
    onPressIn: (event: GestureResponderEvent) => void;
    onPressOut: (event: GestureResponderEvent) => void;
    depth: import("react-native-reanimated").SharedValue<number>;
    offset: {
        dx: import("react-native-reanimated").DerivedValue<number>;
        dy: import("react-native-reanimated").DerivedValue<number>;
    };
    reflectedLightOffset: {
        dx: import("react-native-reanimated").DerivedValue<number>;
        dy: import("react-native-reanimated").DerivedValue<number>;
    };
    inset: import("react-native-reanimated").DerivedValue<boolean>;
    blurRadius: import("react-native-reanimated").DerivedValue<number>;
    PressedAnimatedStyle: ViewStyle;
};
export {};
//# sourceMappingURL=useAnimatedOffset.d.ts.map